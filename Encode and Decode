
import sys


def encode(input_lists):
    word = ''
    for i in input_lists:
        binary = bin(i)[2:]  
        for v in binary:
            word += v * 2  
        word += '0'  

    result = int(word[:-1], 2)  

    return result
    # REPLACE pass ABOVE WITH YOUR CODE    


def decode(inputs):
    binary = bin(inputs)[2:] 
    list_binary = list(binary)


    count = 0
    lists = []
    word = ''
    for i,v in enumerate(list_binary):
        if (len(list_binary) > i+1) and list_binary[i] == list_binary[i+1]:
            count+= 1
        else:
            if list_binary[i] == '0' and ((count+1) % 2 !=0):
                word += (str(list_binary[i]) * ((count+1) // 2)) + ','
            elif list_binary[i] == '1' and ((count+1) % 2 !=0):
                return None
            else:
                word += (str(list_binary[i]) * ((count+1) // 2))
            count = 0


    final_lists = []
    try:
        for i in word.split(','):
            number = int(i) 
            final_lists.append(number) 

        lists_result = []
        for i in final_lists:
            binary = str(i)
            converted = int(binary, 2)
            lists_result.append(converted)
    except ValueError:
        return None

    return lists_result

    # REPLACE pass ABOVE WITH YOUR CODE



# We assume that user input is valid. No need to check
# for validity, nor to take action in case it is invalid.
print('Input either a strictly positive integer')
the_input = eval(input('or a nonempty list of strictly positive integers: '))
if type(the_input) is int:
    print('  In base 2,', the_input, 'reads as', bin(the_input)[2 :])
    decoding = decode(the_input)
    if decoding is None:
        print('Incorrect encoding!')
    else:
        print('  It encodes: ', decode(the_input))
else:
    print('  In base 2,', the_input, 'reads as',
          f'[{", ".join(bin(e)[2: ] for e in the_input)}]'
         )
    print('  It is encoded by', encode(the_input))
